'Ge''Ge'"""Definitions of auxiliary objects and operator properties."""

import numpy as np
from cmath import phase, exp
from math import asin, atan, pi, sin, cos

I3 = np.identity(3)

# names of SM parameters
SM_keys = ['g', 'gp', 'gs', 'Lambda', 'm2', 'Gu', 'Gd', 'Ge', 'Theta', 'Thetap', 'Thetas']

# names of WCs with 0, 2, or 4 fermions (i.e. scalars, 3x3 matrices, and 3x3x3x3 tensors)
WC_keys_0f = ["G", "Gtilde", "W", "Wtilde", "phi", "phiBox", "phiD", "phiG", "phiB", "phiW", "phiWB", "phiGtilde", "phiBtilde", "phiWtilde", "phiWtildeB"]
WC_keys_2f = ["uphi", "dphi", "ephi", "eW", "eB", "uG", "uW", "uB", "dG", "dW", "dB", "phil1", "phil3", "phie", "phiq1", "phiq3", "phiu", "phid", "phiud", "llphiphi"]
WC_keys_4f = ["ll", "qq1", "qq3", "lq1", "lq3", "ee", "uu", "dd", "eu", "ed", "ud1", "ud8", "le", "lu", "ld", "qe", "qu1", "qd1", "qu8", "qd8", "ledq", "quqd1", "quqd8", "lequ1", "lequ3", "duql", "qque", "qqql", "duue"]

C_keys = SM_keys + WC_keys_0f + WC_keys_2f + WC_keys_4f

C_keys_shape = {
   'g': 1,
   'gp': 1,
   'gs': 1,
   'Lambda': 1,
   'm2': 1,
   'Gu': (3, 3),
   'Gd': (3, 3),
   'Ge': (3, 3),
   'Theta': 1,
   'Thetap': 1,
   'Thetas': 1,
   'G': 1,
   'Gtilde': 1,
   'W': 1,
   'Wtilde': 1,
   'phi': 1,
   'phiBox': 1,
   'phiD': 1,
   'phiG': 1,
   'phiB': 1,
   'phiW': 1,
   'phiWB': 1,
   'phiGtilde': 1,
   'phiBtilde': 1,
   'phiWtilde': 1,
   'phiWtildeB': 1,
   'uphi': (3,3),
   'dphi': (3,3),
   'ephi': (3,3),
   'eW': (3,3),
   'eB': (3,3),
   'uG': (3,3),
   'uW': (3,3),
   'uB': (3,3),
   'dG': (3,3),
   'dW': (3,3),
   'dB': (3,3),
   'phil1': (3,3),
   'phil3': (3,3),
   'phie': (3,3),
   'phiq1': (3,3),
   'phiq3': (3,3),
   'phiu': (3,3),
   'phid': (3,3),
   'phiud': (3,3),
   'llphiphi': (3,3),
   'll': (3,3,3,3),
   'qq1': (3,3,3,3),
   'qq3': (3,3,3,3),
   'lq1': (3,3,3,3),
   'lq3': (3,3,3,3),
   'ee': (3,3,3,3),
   'uu': (3,3,3,3),
   'dd': (3,3,3,3),
   'eu': (3,3,3,3),
   'ed': (3,3,3,3),
   'ud1': (3,3,3,3),
   'ud8': (3,3,3,3),
   'le': (3,3,3,3),
   'lu': (3,3,3,3),
   'ld': (3,3,3,3),
   'qe': (3,3,3,3),
   'qu1': (3,3,3,3),
   'qd1': (3,3,3,3),
   'qu8': (3,3,3,3),
   'qd8': (3,3,3,3),
   'ledq': (3,3,3,3),
   'quqd1': (3,3,3,3),
   'quqd8': (3,3,3,3),
   'lequ1': (3,3,3,3),
   'lequ3': (3,3,3,3),
   'duql': (3,3,3,3),
   'qque': (3,3,3,3),
   'qqql': (3,3,3,3),
   'duue': (3,3,3,3),
}

# names of Wilson coefficients with the same fermionic symmetry properties
C_symm_keys={}
# 0 0F scalar object
C_symm_keys[0] = WC_keys_0f + ['g', 'gp', 'gs', 'Lambda', 'm2', 'Theta', 'Thetap', 'Thetas']
# 1 2F general 3x3 matrix
C_symm_keys[1] = ["uphi", "dphi", "ephi", "eW", "eB", "uG", "uW", "uB", "dG", "dW", "dB", "phiud", 'Gu', 'Gd', 'Ge']
# 2 2F Hermitian matrix
C_symm_keys[2] = ["phil1", "phil3", "phie", "phiq1", "phiq3", "phiu", "phid",]
# 3 4F general 3x3x3x3 object
C_symm_keys[3] = ["ledq", "quqd1", "quqd8", "lequ1", "lequ3", "duql", "duue"]
# 4 4F two identical ffbar currents
C_symm_keys[4] = ["ll", "qq1", "qq3", "uu", "dd",]
# 5 4F two independent ffbar currents
C_symm_keys[5] = ["lq1", "lq3", "eu", "ed", "ud1", "ud8", "le", "lu", "ld", "qe", "qu1", "qd1", "qu8", "qd8",]
# 6 4F two identical ffbar currents - special case Cee
C_symm_keys[6] = ["ee",]
# 7 4F Baryon-number-violating - special case Cqque
C_symm_keys[7] = ["qque",]
# 8 4F Baryon-number-violating - special case Cqqql
C_symm_keys[8] = ["qqql",]
# 9 2F symmetric matrix
C_symm_keys[9] = ["llphiphi"]


def symmetrize_2(b):
    a = np.array(b, copy=True, dtype=complex)
    a[1,0]=a[0,1].conj()
    a[2,0]=a[0,2].conj()
    a[2,1]=a[1,2].conj()
    a.imag[0,0]=0
    a.imag[1,1]=0
    a.imag[2,2]=0
    return a

def symmetrize_4(b):
    a = np.array(b, copy=True, dtype=complex)
    a.real[0,0,1,0]=a.real[0,0,0,1]
    a.real[0,0,2,0]=a.real[0,0,0,2]
    a.real[0,0,2,1]=a.real[0,0,1,2]
    a.real[0,1,0,0]=a.real[0,0,0,1]
    a.real[0,2,0,0]=a.real[0,0,0,2]
    a.real[0,2,0,1]=a.real[0,1,0,2]
    a.real[0,2,1,0]=a.real[0,1,2,0]
    a.real[1,0,0,0]=a.real[0,0,0,1]
    a.real[1,0,0,1]=a.real[0,1,1,0]
    a.real[1,0,0,2]=a.real[0,1,2,0]
    a.real[1,0,1,0]=a.real[0,1,0,1]
    a.real[1,0,1,1]=a.real[0,1,1,1]
    a.real[1,0,1,2]=a.real[0,1,2,1]
    a.real[1,0,2,0]=a.real[0,1,0,2]
    a.real[1,0,2,1]=a.real[0,1,1,2]
    a.real[1,0,2,2]=a.real[0,1,2,2]
    a.real[1,1,0,0]=a.real[0,0,1,1]
    a.real[1,1,0,1]=a.real[0,1,1,1]
    a.real[1,1,0,2]=a.real[0,2,1,1]
    a.real[1,1,1,0]=a.real[0,1,1,1]
    a.real[1,1,2,0]=a.real[0,2,1,1]
    a.real[1,1,2,1]=a.real[1,1,1,2]
    a.real[1,2,0,0]=a.real[0,0,1,2]
    a.real[1,2,0,1]=a.real[0,1,1,2]
    a.real[1,2,0,2]=a.real[0,2,1,2]
    a.real[1,2,1,0]=a.real[0,1,2,1]
    a.real[1,2,1,1]=a.real[1,1,1,2]
    a.real[1,2,2,0]=a.real[0,2,2,1]
    a.real[2,0,0,0]=a.real[0,0,0,2]
    a.real[2,0,0,1]=a.real[0,1,2,0]
    a.real[2,0,0,2]=a.real[0,2,2,0]
    a.real[2,0,1,0]=a.real[0,1,0,2]
    a.real[2,0,1,1]=a.real[0,2,1,1]
    a.real[2,0,1,2]=a.real[0,2,2,1]
    a.real[2,0,2,0]=a.real[0,2,0,2]
    a.real[2,0,2,1]=a.real[0,2,1,2]
    a.real[2,0,2,2]=a.real[0,2,2,2]
    a.real[2,1,0,0]=a.real[0,0,1,2]
    a.real[2,1,0,1]=a.real[0,1,2,1]
    a.real[2,1,0,2]=a.real[0,2,2,1]
    a.real[2,1,1,0]=a.real[0,1,1,2]
    a.real[2,1,1,1]=a.real[1,1,1,2]
    a.real[2,1,1,2]=a.real[1,2,2,1]
    a.real[2,1,2,0]=a.real[0,2,1,2]
    a.real[2,1,2,1]=a.real[1,2,1,2]
    a.real[2,1,2,2]=a.real[1,2,2,2]
    a.real[2,2,0,0]=a.real[0,0,2,2]
    a.real[2,2,0,1]=a.real[0,1,2,2]
    a.real[2,2,0,2]=a.real[0,2,2,2]
    a.real[2,2,1,0]=a.real[0,1,2,2]
    a.real[2,2,1,1]=a.real[1,1,2,2]
    a.real[2,2,1,2]=a.real[1,2,2,2]
    a.real[2,2,2,0]=a.real[0,2,2,2]
    a.real[2,2,2,1]=a.real[1,2,2,2]
    a.imag[0,0,0,0]=0
    a.imag[0,0,1,0]=-a.imag[0,0,0,1]
    a.imag[0,0,1,1]=0
    a.imag[0,0,2,0]=-a.imag[0,0,0,2]
    a.imag[0,0,2,1]=-a.imag[0,0,1,2]
    a.imag[0,0,2,2]=0
    a.imag[0,1,0,0]=a.imag[0,0,0,1]
    a.imag[0,1,1,0]=0
    a.imag[0,2,0,0]=a.imag[0,0,0,2]
    a.imag[0,2,0,1]=a.imag[0,1,0,2]
    a.imag[0,2,1,0]=-a.imag[0,1,2,0]
    a.imag[0,2,2,0]=0
    a.imag[1,0,0,0]=-a.imag[0,0,0,1]
    a.imag[1,0,0,1]=0
    a.imag[1,0,0,2]=-a.imag[0,1,2,0]
    a.imag[1,0,1,0]=-a.imag[0,1,0,1]
    a.imag[1,0,1,1]=-a.imag[0,1,1,1]
    a.imag[1,0,1,2]=-a.imag[0,1,2,1]
    a.imag[1,0,2,0]=-a.imag[0,1,0,2]
    a.imag[1,0,2,1]=-a.imag[0,1,1,2]
    a.imag[1,0,2,2]=-a.imag[0,1,2,2]
    a.imag[1,1,0,0]=0
    a.imag[1,1,0,1]=a.imag[0,1,1,1]
    a.imag[1,1,0,2]=a.imag[0,2,1,1]
    a.imag[1,1,1,0]=-a.imag[0,1,1,1]
    a.imag[1,1,1,1]=0
    a.imag[1,1,2,0]=-a.imag[0,2,1,1]
    a.imag[1,1,2,1]=-a.imag[1,1,1,2]
    a.imag[1,1,2,2]=0
    a.imag[1,2,0,0]=a.imag[0,0,1,2]
    a.imag[1,2,0,1]=a.imag[0,1,1,2]
    a.imag[1,2,0,2]=a.imag[0,2,1,2]
    a.imag[1,2,1,0]=-a.imag[0,1,2,1]
    a.imag[1,2,1,1]=a.imag[1,1,1,2]
    a.imag[1,2,2,0]=-a.imag[0,2,2,1]
    a.imag[1,2,2,1]=0
    a.imag[2,0,0,0]=-a.imag[0,0,0,2]
    a.imag[2,0,0,1]=a.imag[0,1,2,0]
    a.imag[2,0,0,2]=0
    a.imag[2,0,1,0]=-a.imag[0,1,0,2]
    a.imag[2,0,1,1]=-a.imag[0,2,1,1]
    a.imag[2,0,1,2]=-a.imag[0,2,2,1]
    a.imag[2,0,2,0]=-a.imag[0,2,0,2]
    a.imag[2,0,2,1]=-a.imag[0,2,1,2]
    a.imag[2,0,2,2]=-a.imag[0,2,2,2]
    a.imag[2,1,0,0]=-a.imag[0,0,1,2]
    a.imag[2,1,0,1]=a.imag[0,1,2,1]
    a.imag[2,1,0,2]=a.imag[0,2,2,1]
    a.imag[2,1,1,0]=-a.imag[0,1,1,2]
    a.imag[2,1,1,1]=-a.imag[1,1,1,2]
    a.imag[2,1,1,2]=0
    a.imag[2,1,2,0]=-a.imag[0,2,1,2]
    a.imag[2,1,2,1]=-a.imag[1,2,1,2]
    a.imag[2,1,2,2]=-a.imag[1,2,2,2]
    a.imag[2,2,0,0]=0
    a.imag[2,2,0,1]=a.imag[0,1,2,2]
    a.imag[2,2,0,2]=a.imag[0,2,2,2]
    a.imag[2,2,1,0]=-a.imag[0,1,2,2]
    a.imag[2,2,1,1]=0
    a.imag[2,2,1,2]=a.imag[1,2,2,2]
    a.imag[2,2,2,0]=-a.imag[0,2,2,2]
    a.imag[2,2,2,1]=-a.imag[1,2,2,2]
    a.imag[2,2,2,2]=0
    return a

def symmetrize_5(b):
    a = np.array(b, copy=True, dtype=complex)
    a.real[0,0,1,0]=a.real[0,0,0,1]
    a.real[0,0,2,0]=a.real[0,0,0,2]
    a.real[0,0,2,1]=a.real[0,0,1,2]
    a.real[1,0,0,0]=a.real[0,1,0,0]
    a.real[1,0,0,1]=a.real[0,1,1,0]
    a.real[1,0,0,2]=a.real[0,1,2,0]
    a.real[1,0,1,0]=a.real[0,1,0,1]
    a.real[1,0,1,1]=a.real[0,1,1,1]
    a.real[1,0,1,2]=a.real[0,1,2,1]
    a.real[1,0,2,0]=a.real[0,1,0,2]
    a.real[1,0,2,1]=a.real[0,1,1,2]
    a.real[1,0,2,2]=a.real[0,1,2,2]
    a.real[1,1,1,0]=a.real[1,1,0,1]
    a.real[1,1,2,0]=a.real[1,1,0,2]
    a.real[1,1,2,1]=a.real[1,1,1,2]
    a.real[2,0,0,0]=a.real[0,2,0,0]
    a.real[2,0,0,1]=a.real[0,2,1,0]
    a.real[2,0,0,2]=a.real[0,2,2,0]
    a.real[2,0,1,0]=a.real[0,2,0,1]
    a.real[2,0,1,1]=a.real[0,2,1,1]
    a.real[2,0,1,2]=a.real[0,2,2,1]
    a.real[2,0,2,0]=a.real[0,2,0,2]
    a.real[2,0,2,1]=a.real[0,2,1,2]
    a.real[2,0,2,2]=a.real[0,2,2,2]
    a.real[2,1,0,0]=a.real[1,2,0,0]
    a.real[2,1,0,1]=a.real[1,2,1,0]
    a.real[2,1,0,2]=a.real[1,2,2,0]
    a.real[2,1,1,0]=a.real[1,2,0,1]
    a.real[2,1,1,1]=a.real[1,2,1,1]
    a.real[2,1,1,2]=a.real[1,2,2,1]
    a.real[2,1,2,0]=a.real[1,2,0,2]
    a.real[2,1,2,1]=a.real[1,2,1,2]
    a.real[2,1,2,2]=a.real[1,2,2,2]
    a.real[2,2,1,0]=a.real[2,2,0,1]
    a.real[2,2,2,0]=a.real[2,2,0,2]
    a.real[2,2,2,1]=a.real[2,2,1,2]
    a.imag[0,0,0,0]=0
    a.imag[0,0,1,0]=-a.imag[0,0,0,1]
    a.imag[0,0,1,1]=0
    a.imag[0,0,2,0]=-a.imag[0,0,0,2]
    a.imag[0,0,2,1]=-a.imag[0,0,1,2]
    a.imag[0,0,2,2]=0
    a.imag[1,0,0,0]=-a.imag[0,1,0,0]
    a.imag[1,0,0,1]=-a.imag[0,1,1,0]
    a.imag[1,0,0,2]=-a.imag[0,1,2,0]
    a.imag[1,0,1,0]=-a.imag[0,1,0,1]
    a.imag[1,0,1,1]=-a.imag[0,1,1,1]
    a.imag[1,0,1,2]=-a.imag[0,1,2,1]
    a.imag[1,0,2,0]=-a.imag[0,1,0,2]
    a.imag[1,0,2,1]=-a.imag[0,1,1,2]
    a.imag[1,0,2,2]=-a.imag[0,1,2,2]
    a.imag[1,1,0,0]=0
    a.imag[1,1,1,0]=-a.imag[1,1,0,1]
    a.imag[1,1,1,1]=0
    a.imag[1,1,2,0]=-a.imag[1,1,0,2]
    a.imag[1,1,2,1]=-a.imag[1,1,1,2]
    a.imag[1,1,2,2]=0
    a.imag[2,0,0,0]=-a.imag[0,2,0,0]
    a.imag[2,0,0,1]=-a.imag[0,2,1,0]
    a.imag[2,0,0,2]=-a.imag[0,2,2,0]
    a.imag[2,0,1,0]=-a.imag[0,2,0,1]
    a.imag[2,0,1,1]=-a.imag[0,2,1,1]
    a.imag[2,0,1,2]=-a.imag[0,2,2,1]
    a.imag[2,0,2,0]=-a.imag[0,2,0,2]
    a.imag[2,0,2,1]=-a.imag[0,2,1,2]
    a.imag[2,0,2,2]=-a.imag[0,2,2,2]
    a.imag[2,1,0,0]=-a.imag[1,2,0,0]
    a.imag[2,1,0,1]=-a.imag[1,2,1,0]
    a.imag[2,1,0,2]=-a.imag[1,2,2,0]
    a.imag[2,1,1,0]=-a.imag[1,2,0,1]
    a.imag[2,1,1,1]=-a.imag[1,2,1,1]
    a.imag[2,1,1,2]=-a.imag[1,2,2,1]
    a.imag[2,1,2,0]=-a.imag[1,2,0,2]
    a.imag[2,1,2,1]=-a.imag[1,2,1,2]
    a.imag[2,1,2,2]=-a.imag[1,2,2,2]
    a.imag[2,2,0,0]=0
    a.imag[2,2,1,0]=-a.imag[2,2,0,1]
    a.imag[2,2,1,1]=0
    a.imag[2,2,2,0]=-a.imag[2,2,0,2]
    a.imag[2,2,2,1]=-a.imag[2,2,1,2]
    a.imag[2,2,2,2]=0
    return a

def symmetrize_6(b):
    a = np.array(b, copy=True, dtype=complex)
    a.real[0,0,1,0]=a.real[0,0,0,1]
    a.real[0,0,2,0]=a.real[0,0,0,2]
    a.real[0,0,2,1]=a.real[0,0,1,2]
    a.real[0,1,0,0]=a.real[0,0,0,1]
    a.real[0,1,1,0]=a.real[0,0,1,1]
    a.real[0,1,2,0]=a.real[0,0,1,2]
    a.real[0,2,0,0]=a.real[0,0,0,2]
    a.real[0,2,0,1]=a.real[0,1,0,2]
    a.real[0,2,1,0]=a.real[0,0,1,2]
    a.real[0,2,1,1]=a.real[0,1,1,2]
    a.real[0,2,2,0]=a.real[0,0,2,2]
    a.real[0,2,2,1]=a.real[0,1,2,2]
    a.real[1,0,0,0]=a.real[0,0,0,1]
    a.real[1,0,0,1]=a.real[0,0,1,1]
    a.real[1,0,0,2]=a.real[0,0,1,2]
    a.real[1,0,1,0]=a.real[0,1,0,1]
    a.real[1,0,1,1]=a.real[0,1,1,1]
    a.real[1,0,1,2]=a.real[0,1,2,1]
    a.real[1,0,2,0]=a.real[0,1,0,2]
    a.real[1,0,2,1]=a.real[0,1,1,2]
    a.real[1,0,2,2]=a.real[0,1,2,2]
    a.real[1,1,0,0]=a.real[0,0,1,1]
    a.real[1,1,0,1]=a.real[0,1,1,1]
    a.real[1,1,0,2]=a.real[0,1,1,2]
    a.real[1,1,1,0]=a.real[0,1,1,1]
    a.real[1,1,2,0]=a.real[0,1,1,2]
    a.real[1,1,2,1]=a.real[1,1,1,2]
    a.real[1,2,0,0]=a.real[0,0,1,2]
    a.real[1,2,0,1]=a.real[0,1,1,2]
    a.real[1,2,0,2]=a.real[0,2,1,2]
    a.real[1,2,1,0]=a.real[0,1,2,1]
    a.real[1,2,1,1]=a.real[1,1,1,2]
    a.real[1,2,2,0]=a.real[0,1,2,2]
    a.real[1,2,2,1]=a.real[1,1,2,2]
    a.real[2,0,0,0]=a.real[0,0,0,2]
    a.real[2,0,0,1]=a.real[0,0,1,2]
    a.real[2,0,0,2]=a.real[0,0,2,2]
    a.real[2,0,1,0]=a.real[0,1,0,2]
    a.real[2,0,1,1]=a.real[0,1,1,2]
    a.real[2,0,1,2]=a.real[0,1,2,2]
    a.real[2,0,2,0]=a.real[0,2,0,2]
    a.real[2,0,2,1]=a.real[0,2,1,2]
    a.real[2,0,2,2]=a.real[0,2,2,2]
    a.real[2,1,0,0]=a.real[0,0,1,2]
    a.real[2,1,0,1]=a.real[0,1,2,1]
    a.real[2,1,0,2]=a.real[0,1,2,2]
    a.real[2,1,1,0]=a.real[0,1,1,2]
    a.real[2,1,1,1]=a.real[1,1,1,2]
    a.real[2,1,1,2]=a.real[1,1,2,2]
    a.real[2,1,2,0]=a.real[0,2,1,2]
    a.real[2,1,2,1]=a.real[1,2,1,2]
    a.real[2,1,2,2]=a.real[1,2,2,2]
    a.real[2,2,0,0]=a.real[0,0,2,2]
    a.real[2,2,0,1]=a.real[0,1,2,2]
    a.real[2,2,0,2]=a.real[0,2,2,2]
    a.real[2,2,1,0]=a.real[0,1,2,2]
    a.real[2,2,1,1]=a.real[1,1,2,2]
    a.real[2,2,1,2]=a.real[1,2,2,2]
    a.real[2,2,2,0]=a.real[0,2,2,2]
    a.real[2,2,2,1]=a.real[1,2,2,2]
    a.imag[0,0,0,0]=0
    a.imag[0,0,1,0]=-a.imag[0,0,0,1]
    a.imag[0,0,1,1]=0
    a.imag[0,0,2,0]=-a.imag[0,0,0,2]
    a.imag[0,0,2,1]=-a.imag[0,0,1,2]
    a.imag[0,0,2,2]=0
    a.imag[0,1,0,0]=a.imag[0,0,0,1]
    a.imag[0,1,1,0]=0
    a.imag[0,1,2,0]=-a.imag[0,0,1,2]
    a.imag[0,2,0,0]=a.imag[0,0,0,2]
    a.imag[0,2,0,1]=a.imag[0,1,0,2]
    a.imag[0,2,1,0]=a.imag[0,0,1,2]
    a.imag[0,2,1,1]=a.imag[0,1,1,2]
    a.imag[0,2,2,0]=0
    a.imag[0,2,2,1]=a.imag[0,1,2,2]
    a.imag[1,0,0,0]=-a.imag[0,0,0,1]
    a.imag[1,0,0,1]=0
    a.imag[1,0,0,2]=a.imag[0,0,1,2]
    a.imag[1,0,1,0]=-a.imag[0,1,0,1]
    a.imag[1,0,1,1]=-a.imag[0,1,1,1]
    a.imag[1,0,1,2]=-a.imag[0,1,2,1]
    a.imag[1,0,2,0]=-a.imag[0,1,0,2]
    a.imag[1,0,2,1]=-a.imag[0,1,1,2]
    a.imag[1,0,2,2]=-a.imag[0,1,2,2]
    a.imag[1,1,0,0]=0
    a.imag[1,1,0,1]=a.imag[0,1,1,1]
    a.imag[1,1,0,2]=a.imag[0,1,1,2]
    a.imag[1,1,1,0]=-a.imag[0,1,1,1]
    a.imag[1,1,1,1]=0
    a.imag[1,1,2,0]=-a.imag[0,1,1,2]
    a.imag[1,1,2,1]=-a.imag[1,1,1,2]
    a.imag[1,1,2,2]=0
    a.imag[1,2,0,0]=a.imag[0,0,1,2]
    a.imag[1,2,0,1]=a.imag[0,1,1,2]
    a.imag[1,2,0,2]=a.imag[0,2,1,2]
    a.imag[1,2,1,0]=-a.imag[0,1,2,1]
    a.imag[1,2,1,1]=a.imag[1,1,1,2]
    a.imag[1,2,2,0]=-a.imag[0,1,2,2]
    a.imag[1,2,2,1]=0
    a.imag[2,0,0,0]=-a.imag[0,0,0,2]
    a.imag[2,0,0,1]=-a.imag[0,0,1,2]
    a.imag[2,0,0,2]=0
    a.imag[2,0,1,0]=-a.imag[0,1,0,2]
    a.imag[2,0,1,1]=-a.imag[0,1,1,2]
    a.imag[2,0,1,2]=-a.imag[0,1,2,2]
    a.imag[2,0,2,0]=-a.imag[0,2,0,2]
    a.imag[2,0,2,1]=-a.imag[0,2,1,2]
    a.imag[2,0,2,2]=-a.imag[0,2,2,2]
    a.imag[2,1,0,0]=-a.imag[0,0,1,2]
    a.imag[2,1,0,1]=a.imag[0,1,2,1]
    a.imag[2,1,0,2]=a.imag[0,1,2,2]
    a.imag[2,1,1,0]=-a.imag[0,1,1,2]
    a.imag[2,1,1,1]=-a.imag[1,1,1,2]
    a.imag[2,1,1,2]=0
    a.imag[2,1,2,0]=-a.imag[0,2,1,2]
    a.imag[2,1,2,1]=-a.imag[1,2,1,2]
    a.imag[2,1,2,2]=-a.imag[1,2,2,2]
    a.imag[2,2,0,0]=0
    a.imag[2,2,0,1]=a.imag[0,1,2,2]
    a.imag[2,2,0,2]=a.imag[0,2,2,2]
    a.imag[2,2,1,0]=-a.imag[0,1,2,2]
    a.imag[2,2,1,1]=0
    a.imag[2,2,1,2]=a.imag[1,2,2,2]
    a.imag[2,2,2,0]=-a.imag[0,2,2,2]
    a.imag[2,2,2,1]=-a.imag[1,2,2,2]
    a.imag[2,2,2,2]=0
    return a

def symmetrize_7(b):
    a = np.array(b, copy=True, dtype=complex)
    a[1,0,0,0]=a[0,1,0,0]
    a[1,0,0,1]=a[0,1,0,1]
    a[1,0,0,2]=a[0,1,0,2]
    a[1,0,1,0]=a[0,1,1,0]
    a[1,0,1,1]=a[0,1,1,1]
    a[1,0,1,2]=a[0,1,1,2]
    a[1,0,2,0]=a[0,1,2,0]
    a[1,0,2,1]=a[0,1,2,1]
    a[1,0,2,2]=a[0,1,2,2]
    a[2,0,0,0]=a[0,2,0,0]
    a[2,0,0,1]=a[0,2,0,1]
    a[2,0,0,2]=a[0,2,0,2]
    a[2,0,1,0]=a[0,2,1,0]
    a[2,0,1,1]=a[0,2,1,1]
    a[2,0,1,2]=a[0,2,1,2]
    a[2,0,2,0]=a[0,2,2,0]
    a[2,0,2,1]=a[0,2,2,1]
    a[2,0,2,2]=a[0,2,2,2]
    a[2,1,0,0]=a[1,2,0,0]
    a[2,1,0,1]=a[1,2,0,1]
    a[2,1,0,2]=a[1,2,0,2]
    a[2,1,1,0]=a[1,2,1,0]
    a[2,1,1,1]=a[1,2,1,1]
    a[2,1,1,2]=a[1,2,1,2]
    a[2,1,2,0]=a[1,2,2,0]
    a[2,1,2,1]=a[1,2,2,1]
    a[2,1,2,2]=a[1,2,2,2]
    return a

def symmetrize_8(b):
    a = np.array(b, copy=True, dtype=complex)
    a[1,0,0,0]=a[0,0,1,0]
    a[1,0,0,1]=a[0,0,1,1]
    a[1,0,0,2]=a[0,0,1,2]
    a[1,1,0,0]=a[0,1,1,0]
    a[1,1,0,1]=a[0,1,1,1]
    a[1,1,0,2]=a[0,1,1,2]
    a[2,0,0,0]=a[0,0,2,0]
    a[2,0,0,1]=a[0,0,2,1]
    a[2,0,0,2]=a[0,0,2,2]
    a[2,0,1,0]=a[1,2,0,0]+a[1,0,2,0]-a[0,2,1,0]
    a[2,0,1,1]=a[1,2,0,1]+a[1,0,2,1]-a[0,2,1,1]
    a[2,0,1,2]=a[1,2,0,2]+a[1,0,2,2]-a[0,2,1,2]
    a[2,1,0,0]=a[0,2,1,0]+a[0,1,2,0]-a[1,2,0,0]
    a[2,1,0,1]=a[0,2,1,1]+a[0,1,2,1]-a[1,2,0,1]
    a[2,1,0,2]=a[0,2,1,2]+a[0,1,2,2]-a[1,2,0,2]
    a[2,1,1,0]=a[1,1,2,0]
    a[2,1,1,1]=a[1,1,2,1]
    a[2,1,1,2]=a[1,1,2,2]
    a[2,2,0,0]=a[0,2,2,0]
    a[2,2,0,1]=a[0,2,2,1]
    a[2,2,0,2]=a[0,2,2,2]
    a[2,2,1,0]=a[1,2,2,0]
    a[2,2,1,1]=a[1,2,2,1]
    a[2,2,1,2]=a[1,2,2,2]
    return a

def symmetrize_9(b):
    a = np.array(b, copy=True, dtype=complex)
    a[1,0]=a[0,1]
    a[2,0]=a[0,2]
    a[2,1]=a[1,2]
    return a

def symmetrize(C):
    C_symm = {}
    for i, v in C.items():
        if i in C_symm_keys[0]:
            C_symm[i] = v.real
        elif i in C_symm_keys[1] + C_symm_keys[3]:
            C_symm[i] = v # nothing to do
        elif i in C_symm_keys[2]:
            C_symm[i] = symmetrize_2(C[i])
        elif i in C_symm_keys[4]:
            C_symm[i] = symmetrize_4(C[i])
        elif i in C_symm_keys[5]:
            C_symm[i] = symmetrize_5(C[i])
        elif i in C_symm_keys[6]:
            C_symm[i] = symmetrize_6(C[i])
        elif i in C_symm_keys[7]:
            C_symm[i] = symmetrize_7(C[i])
        elif i in C_symm_keys[8]:
            C_symm[i] = symmetrize_8(C[i])
        elif i in C_symm_keys[9]:
            C_symm[i] = symmetrize_9(C[i])
    return C_symm

# elements that are redundant and can thus be omitted in the input/output
redundant_elements = {'G': [],
 'Gd': [],
 'Ge': [],
 'Gtilde': [],
 'Gu': [],
 'Lambda': [],
 'Theta': [],
 'Thetap': [],
 'Thetas': [],
 'W': [],
 'Wtilde': [],
 'dB': [],
 'dG': [],
 'dW': [],
 'dd': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'dphi': [],
 'duql': [],
 'duue': [],
 'eB': [],
 'eW': [],
 'ed': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ee': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 1, 1, 0),
  (0, 1, 2, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (0, 2, 1, 1),
  (0, 2, 2, 0),
  (0, 2, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (1, 2, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ephi': [],
 'eu': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'g': [],
 'gp': [],
 'gs': [],
 'ld': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'le': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ledq': [],
 'lequ1': [],
 'lequ3': [],
 'll': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'llphiphi': [(1, 0), (2, 0), (2, 1)],
 'lq1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'lq3': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'lu': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'm2': [],
 'phi': [],
 'phiB': [],
 'phiBox': [],
 'phiBtilde': [],
 'phiD': [],
 'phiG': [],
 'phiGtilde': [],
 'phiW': [],
 'phiWB': [],
 'phiWtilde': [],
 'phiWtildeB': [],
 'phid': [(1, 0), (2, 0), (2, 1)],
 'phie': [(1, 0), (2, 0), (2, 1)],
 'phil1': [(1, 0), (2, 0), (2, 1)],
 'phil3': [(1, 0), (2, 0), (2, 1)],
 'phiq1': [(1, 0), (2, 0), (2, 1)],
 'phiq3': [(1, 0), (2, 0), (2, 1)],
 'phiu': [(1, 0), (2, 0), (2, 1)],
 'phiud': [],
 'qd1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qd8': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qe': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qq1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qq3': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qqql': [(1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2)],
 'qque': [(1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2)],
 'qu1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qu8': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'quqd1': [],
 'quqd8': [],
 'uB': [],
 'uG': [],
 'uW': [],
 'ud1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ud8': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'uphi': [],
 'uu': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)]}

# elements where the imaginary part must be zero and which can thus
# be omitted in the input/output
vanishing_im_parts = {'G': [],
 'Gd': [],
 'Ge': [],
 'Gtilde': [],
 'Gu': [],
 'Lambda': [],
 'Theta': [],
 'Thetap': [],
 'Thetas': [],
 'W': [],
 'Wtilde': [],
 'dB': [],
 'dG': [],
 'dW': [],
 'dd': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'dphi': [],
 'duql': [],
 'duue': [],
 'eB': [],
 'eW': [],
 'ed': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'ee': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'ephi': [],
 'eu': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'g': [],
 'gp': [],
 'gs': [],
 'ld': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'le': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'ledq': [],
 'lequ1': [],
 'lequ3': [],
 'll': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'llphiphi': [],
 'lq1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'lq3': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'lu': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'm2': [],
 'phi': [],
 'phiB': [],
 'phiBox': [],
 'phiBtilde': [],
 'phiD': [],
 'phiG': [],
 'phiGtilde': [],
 'phiW': [],
 'phiWB': [],
 'phiWtilde': [],
 'phiWtildeB': [],
 'phid': [(0, 0), (1, 1), (2, 2)],
 'phie': [(0, 0), (1, 1), (2, 2)],
 'phil1': [(0, 0), (1, 1), (2, 2)],
 'phil3': [(0, 0), (1, 1), (2, 2)],
 'phiq1': [(0, 0), (1, 1), (2, 2)],
 'phiq3': [(0, 0), (1, 1), (2, 2)],
 'phiu': [(0, 0), (1, 1), (2, 2)],
 'phiud': [],
 'qd1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qd8': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qe': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qq1': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'qq3': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'qqql': [],
 'qque': [],
 'qu1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qu8': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'quqd1': [],
 'quqd8': [],
 'uB': [],
 'uG': [],
 'uW': [],
 'ud1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'ud8': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'uphi': [],
 'uu': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)]}

def argdet(U):
    return np.angle(np.linalg.det(U))

def flavor_rotation(C_in, Uq, Uu, Ud, Ul, Ue, sm_parameters=True):
    """Gauge-invariant $U(3)^5$ flavor rotation of all Wilson coefficients and
    SM parameters."""
    C = {}
    if sm_parameters:
        # shift of theta terms, see 0907.4763
        C['Thetas'] = C_in['Thetas'] - 2*argdet(Uq) + argdet(Uu) + argdet(Ud)
        C['Theta'] = C_in['Theta'] - 3*argdet(Uq) - argdet(Ul)
        C['Thetap'] = ( C_in['Thetap'] - (1/6)*argdet(Uq) + (4/3)*argdet(Uu) + (1/3)*argdet(Ud)
                                       - (1/2)*argdet(Ul) + argdet(Ue))
        # nothing to do for scalar SM parameters
        for k in ['g', 'gp', 'gs', 'Lambda', 'm2']:
            C[k] = C_in[k]
        C['Ge'] = Ul.conj().T @ C_in['Ge'] @ Ue
        C['Gu'] = Uq.conj().T @ C_in['Gu'] @ Uu
        C['Gd'] = Uq.conj().T @ C_in['Gd'] @ Ud
    # nothing to do for purely bosonic operators
    for k in WC_keys_0f:
        C[k] = C_in[k]
    # see 1704.03888 table 4 (but staying SU(2) invariant here)
    # LR
    for k in ['ephi', 'eW', 'eB']:
        C[k] = Ul.conj().T @ C_in[k] @ Ue
    for k in ['uphi', 'uW', 'uB', 'uG']:
        C[k] = Uq.conj().T @ C_in[k] @ Uu
    for k in ['dphi', 'dW', 'dB', 'dG']:
        C[k] = Uq.conj().T @ C_in[k] @ Ud
    # LL
    for k in ['phil1', 'phil3']:
        C[k] = Ul.conj().T @ C_in[k] @ Ul
    for k in ['phiq1', 'phiq3']:
        C[k] = Uq.conj().T @ C_in[k] @ Uq
    C['llphiphi'] = Ul.T @ C_in['llphiphi'] @ Ul
    # RR
    C['phie'] = Ue.conj().T @ C_in['phie'] @ Ue
    C['phiu'] = Uu.conj().T @ C_in['phiu'] @ Uu
    C['phid'] = Ud.conj().T @ C_in['phid'] @ Ud
    C['phiud'] = Uu.conj().T @ C_in['phiud'] @ Ud
    # 4-fermion
    C['ll'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Ul, Ul.conj(), Ul.conj(), C_in['ll'])
    C['ee'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Ue, Ue.conj(), Ue.conj(), C_in['ee'])
    C['le'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Ue, Ul.conj(), Ue.conj(), C_in['le'])
    C['qq1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uq, Uq.conj(), Uq.conj(), C_in['qq1'])
    C['qq3'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uq, Uq.conj(), Uq.conj(), C_in['qq3'])
    C['dd'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ud, Ud, Ud.conj(), Ud.conj(), C_in['dd'])
    C['uu'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Uu, Uu.conj(), Uu.conj(), C_in['uu'])
    C['ud1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uu.conj(), Ud.conj(), C_in['ud1'])
    C['ud8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uu.conj(), Ud.conj(), C_in['ud8'])
    C['qu1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uu, Uq.conj(), Uu.conj(), C_in['qu1'])
    C['qu8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uu, Uq.conj(), Uu.conj(), C_in['qu8'])
    C['qd1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ud, Uq.conj(), Ud.conj(), C_in['qd1'])
    C['qd8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ud, Uq.conj(), Ud.conj(), C_in['qd8'])
    C['quqd1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uq.conj(), Uq.conj(), C_in['quqd1'])
    C['quqd8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uq.conj(), Uq.conj(), C_in['quqd8'])
    C['lq1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Uq, Ul.conj(), Uq.conj(), C_in['lq1'])
    C['lq3'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Uq, Ul.conj(), Uq.conj(), C_in['lq3'])
    C['ld'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Ud, Ul.conj(), Ud.conj(), C_in['ld'])
    C['lu'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Uu, Ul.conj(), Uu.conj(), C_in['lu'])
    C['qe'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ue, Uq.conj(), Ue.conj(), C_in['qe'])
    C['ed'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Ud, Ue.conj(), Ud.conj(), C_in['ed'])
    C['eu'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uu, Ue.conj(), Uu.conj(), C_in['eu'])
    C['ledq'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uq, Ul.conj(), Ud.conj(), C_in['ledq'])
    C['lequ1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uu, Ul.conj(), Uq.conj(), C_in['lequ1'])
    C['lequ3'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uu, Ul.conj(), Uq.conj(), C_in['lequ3'])
    C['duql'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ul, Ud, Uq, C_in['duql'])
    C['qque'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ue, Uq, Uu, C_in['qque'])
    C['qqql'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ul, Uq, Uq, C_in['qqql'])
    C['duue'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ue, Ud, Uu, C_in['duue'])
    return C
